//(30)SPEED DISPLAY 

// 'C' source line config statements

// CONFIG
#pragma config FOSC = EXTRC     // Oscillator Selection bits (RC oscillator)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOREN = OFF      // Brown-out Reset Enable bit (BOR disabled)
#pragma config LVP = OFF        // Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit (RB3 is digital I/O, HV on MCLR must be used for programming)
#pragma config CPD = OFF        // Data EEPROM Memory Code Protection bit (Data EEPROM code protection off)
#pragma config WRT = OFF        // Flash Program Memory Write Enable bits (Write protection off; all program memory may be written to by EECON control)
#pragma config CP = OFF         // Flash Program Memory Code Protection bit (Code protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>
#define _XTAL_FREQ 6000000

//0 1 2 3 4 5 6 7 8 9 A B C D E F 
//  S E T   S P D : - - - - R P M
//RB4- BEGIN  RB5-INC RB6-DEC  RB7-RESET

void Lcd_init(void);
void Key_press(void);
void Lcd_Command(unsigned char );
void Lcd_Data(unsigned char);
void Lcd_Display(void);
void Lcd_Digit(unsigned int);
void Lcd_Increment(void);
void Lcd_Decrement(void);
void Lcd_Reset(void);

unsigned char value;
unsigned int d4,d3,d2,d1,i,j;
unsigned char str[]=" SET SPD:    RPM";

void main()
{
    Lcd_init();
    while(1)
    {
        Key_press();//call's specified function when switch is pressed.
    }
}
void Key_press()
{
    PORTB&=0XF0;//PULL-UP CONCEPT
    value=PORTB;
    switch(value)
    {
        case 0XE0://when RB4 PRESSED
        {
            Lcd_Display();
            break;
        }
        case 0XD0://when RB5 PRESSED
        {
            Lcd_Increment();
            break;
        }
        case 0XB0://when RB6 PRESSED
        {
            Lcd_Decrement();
            break;
        }
        case 0X70://when RB7 PRESSED
        {
            Lcd_Reset();
            break;
        }
    }
}
void Lcd_Reset()//reset the speed to zero.
{
    j=0;
    Lcd_Digit(j);
}
void Lcd_Decrement()//decrement the speed
{
    j--;
    if(j<=1)
        j=1;
    Lcd_Digit(j);
}
void Lcd_Increment()//increment the speed
{
    j++;
    if(j>10)// speed wont exceed 5000
        j=10;
    Lcd_Digit(j); 
}

void Lcd_Display()//display at initial with zero.
{
    Lcd_Command(0X80);
    for(i=0;i<=8;i++)
        Lcd_Data(str[i]);
    
    Lcd_Command(0x8D);
    for(i=13;i<=15;i++)
        Lcd_Data(str[i]);
    
    Lcd_Digit(j);
}

void Lcd_Digit(unsigned int num)
{
    d4=(unsigned char) num/1000;//thousand'th place
    d3=(unsigned char)(num-(d4*1000))/100;//hundred'th place
    d2=(unsigned char)(num-(d4*1000)-(d3*100))/10;//ten's place
    d1=(unsigned char) num-(d4*1000)-(d3*100)-(d2*10);//one's place]
    Lcd_Command(0X89);
    Lcd_Data(0X30+d4);
    Lcd_Data(0X30+d3);
    Lcd_Data(0X30+d2);
    Lcd_Data(0X30+d1);
    
}
void Lcd_init()
{
    TRISB=0XF0;//portb higher nibble is input
    TRISC=0X00;// portc and portd are output ports
    TRISD=0X00;
    OPTION_REG&=0X7F;//portb pull up
    Lcd_Command(0X38);
    __delay_ms(10);
    Lcd_Command(0X38);
    __delay_ms(10);
    Lcd_Command(0X38);//enable 5x7 matrix 
    __delay_ms(10);
    Lcd_Command(0X06);//move from left to right
    __delay_ms(10);
    Lcd_Command(0X0C);//enble display cursor off
    __delay_ms(10);
    Lcd_Command(0X01);//clear screen
    __delay_ms(10);
    j=0;
}
void Lcd_Command(unsigned char comm)
{
    PORTC&=~0X08;//RS=0
    PORTD=comm;
    PORTC|=0X01;//E=1
    PORTC&=~0X01;//E=0
    __delay_ms(100);
}
void Lcd_Data(unsigned char d)
{
    PORTC|=0X08;//RS=1
    PORTD=d;
    PORTC|=0X01;//E=1
    PORTC&=~0X01;//E=0 
    __delay_ms(100);//important for exact inc/dec .
}