//(28)LCD INTERFACING
//SITHARAM

// PIC16F877A Configuration Bit Settings
// 'C' source line config statements

// CONFIG
#pragma config FOSC = EXTRC     // Oscillator Selection bits (RC oscillator)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOREN = OFF      // Brown-out Reset Enable bit (BOR disabled)
#pragma config LVP = OFF        // Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit (RB3 is digital I/O, HV on MCLR must be used for programming)
#pragma config CPD = OFF        // Data EEPROM Memory Code Protection bit (Data EEPROM code protection off)
#pragma config WRT = OFF        // Flash Program Memory Write Enable bits (Write protection off; all program memory may be written to by EECON control)
#pragma config CP = OFF         // Flash Program Memory Code Protection bit (Code protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>
#define _XTAL_FREQ 6000000
char i,x;
char str[]="SITHA RAM";
void Lcd_Data(char x)
{
    PORTC |= 0X08;//rs=1
    PORTD = x;
    PORTC |= 0X01;//e=1
    PORTC &= ~0X01;//e=0
    __delay_ms(100); // Reduce the delay to 2ms
}
void Lcd_command(char command)
{
    PORTC &= ~0X08;//rs=0
    PORTD = command;
    PORTC |= 0X01;//e=1
    PORTC &= ~0X01;//e=0
    __delay_ms(100); // Reduce the delay to 2ms
}
void Lcd_init()
{
    Lcd_command(0X38);
    __delay_ms(10);
    Lcd_command(0X38);
    __delay_ms(10);
    Lcd_command(0X38);//two lines 5x7 matrix
    __delay_ms(10);
    Lcd_command(0X0C);//Display ON cursor OFF
    __delay_ms(10);
    Lcd_command(0X01);//clear display screen
    __delay_ms(10);
}
void main()
{
    TRISC=0X00;     //make portc as output port.
    TRISD=0X00;     //make portd as output port.
    Lcd_init();
    __delay_ms(100);
    
    for(i=0;i<15;i++)
    {
        Lcd_command(0X82+i);
        Lcd_Data(str[i]);
        __delay_ms(2);
    } 
    for(i=0;i<15;i++)
    {
        Lcd_command(0XCA-i);
        Lcd_Data(str[i]);
        __delay_ms(2);
    }
    __delay_ms(2000);
    Lcd_command(0x01);//clear screen
    //while(1);//wait to dispay total output till end of simulation.
}