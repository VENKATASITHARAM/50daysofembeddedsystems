//INTERRUPT

#pragma config FOSC = EXTRC     // Oscillator Selection bits (RC oscillator)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOREN = OFF      // Brown-out Reset Enable bit (BOR disabled)
#pragma config LVP = OFF        // Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit (RB3 is digital I/O, HV on MCLR must be used for programming)
#pragma config CPD = OFF        // Data EEPROM Memory Code Protection bit (Data EEPROM code protection off)
#pragma config WRT = OFF        // Flash Program Memory Write Enable bits (Write protection off; all program memory may be written to by EECON control)
#pragma config CP = OFF         // Flash Program Memory Code Protection bit (Code protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>
#define _XTAL_FREQ 6000000
unsigned char val;
void main()
{
    TRISB=0X01; //interrupt switch connected
    TRISC=0X00; //routine led is glowing
    TRISD=0X00;  //interrupt leds are connected.
    
    PORTC=0X00;
    PORTD=0X00;
    INTCON|=0X90;//enabling global interrupt enable & external interrupt enable bits
    OPTION_REG&=0X7F;//internal pull-up enable
    while(1) {
        PORTC=0X01;//led on 
        __delay_ms(500);//delay of half second.
        PORTC=0X00;//led off
        __delay_ms(500);
    }
}
void __interrupt() _ISR(){//interrupt sub-routine
       if(INTCON & 0X02){//when external interrupt bit enabled
        PORTD=0X0F;//portd les's on.
        __delay_ms(2000);//delay of 5sec
        PORTD=0X00;//portd led's off.
    }
    INTCON&=0XFD;//external interrupt flag disable by user
}