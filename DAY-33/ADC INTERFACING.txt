//ADC INTERFACING

// 'C' source line config statements

// CONFIG
#pragma config FOSC = EXTRC     // Oscillator Selection bits (RC oscillator)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOREN = OFF      // Brown-out Reset Enable bit (BOR disabled)
#pragma config LVP = OFF        // Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit (RB3 is digital I/O, HV on MCLR must be used for programming)
#pragma config CPD = OFF        // Data EEPROM Memory Code Protection bit (Data EEPROM code protection off)
#pragma config WRT = OFF        // Flash Program Memory Write Enable bits (Write protection off; all program memory may be written to by EECON control)
#pragma config CP = OFF         // Flash Program Memory Code Protection bit (Code protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>
#define _XTAL_FREQ 6000000

void init(void);
void Lcd_Command(unsigned char);
void Lcd_data(unsigned char );
void Lcd_Output(unsigned int);

unsigned char n,j;
unsigned char k[10];  
unsigned int lovalue,hivalue,m,delaycount;
unsigned long value,voltage;

void main()
{
    init();
    while(1)
    {
        ADCON0=0X91;//1001 0001 CLOCK FREQ(7,6) & POWER UP ADC(0)
        //345 bits 0 for AD2 select
        ADCON0|=0X04;//ADC conversion in progress bit; Enabling by not effecting any other bits.
        //after process complete.. the 3rd bit will be automatically cleard.
        while(ADCON0&0X04);
        //after OR operation with 0x04. the 3rd bit only high remainnig will be 0 . so after conversion end, the 3rd bit
        //becomes 0.then AND operation becomes total value 0.
        lovalue=ADRESL;
        hivalue=ADRESH;
        //ADRESL and ADRESH are two 8-bit registers.USED to store final result of ADC.
        //the value is unsigned int and can able to store upto 16-bit data.
        //so,the 8-bit of high is left moved to higher nibble of value and added to lower nibble the lovalue. 
        value=(unsigned int)(hivalue<<2)+(unsigned int )(lovalue>>6);
        voltage=value*110/1023;
        Lcd_Command(0X80);
        Lcd_Output(voltage);
        __delay_ms(100);
    }
}
void Lcd_Output(unsigned int d)
{
    unsigned char s;
    j =1;
    m = d;
    while(m!=0)
    {
        s = m-(m/10)*10;
        k[j] = s;
        j++;
        m =m/10;
    }
        k[j]='\0';
        j = j-1;
         if(k[3]>0)
         {
          n = 0x30 + k[3];
      Lcd_data(n);
    }
    else
 {
    Lcd_data(0x20);
} 
  n = 0x30 + k[2];
 Lcd_data(n);
    n = 0x30 + k[1];
 Lcd_data(n);
 n = 0x56;
 Lcd_data(n);
    
}
void Lcd_data(unsigned char i)
{
    PORTC|=0X08;//RS=1
    PORTD=i;//data to port
    PORTC|=0X01;//E=1
    PORTC&=~0X01;//E=0
    __delay_ms(100);//1sec delay
}
void Lcd_Command(unsigned char i)
{
    PORTC&=~0X08;//RS=0
    PORTD=i;//data to port
    PORTC|=0X01;//E=1
    PORTC&=~0X01;//E=0
    __delay_ms(100);//1sec delay
}
void init()
{
    TRISA=0X04;//0000 0100 connected pot to AN2
    TRISC=0X00;//PORTC as o/p for RS&E
    TRISD=0X00;//PORTD AS O/P FOR DATA PINS
    ADCON0=0X00;
    ADCON1=0X02;//0000 0010 7th bit=0 so, left justified. 6th bit for freq divison.
    //Fosc/32 as 6th bit of ADCON1=0 AND 6&7TH Bits of ADCON0=10
    //AS we considered an 10-bit ADC we need two 8-bit registers for storing . total in 16bit's we use only 10-bits 
    //remaining 6bits unused are making 0 . may be from left or right decided by left/right justified.
    Lcd_Command(0X38);//Enable 5x7 matrix
    __delay_ms(10);
    Lcd_Command(0X38);//Enable 5x7 matrix
    __delay_ms(10);
    Lcd_Command(0X38);//Enable 5x7 matrix
    __delay_ms(10);
    Lcd_Command(0X06);//Move form left to right
    __delay_ms(10);
    Lcd_Command(0X0C);//Enable display, cursor off
    __delay_ms(10);
    Lcd_Command(0X01);//Clear Screen
    __delay_ms(10);
}
